{
  "summary": {
    "address": {
      "ADDRESS_POST_API": "주소등록 API",
      "ADDRESS_LIST_API": "주소 목록 조회 API",
      "ADDRESS_GET_API": "주소 단건 조회 API",
      "ADDRESS_UPDATE_API": "주소 수정 API",
      "ADDRESS_DELETE_API": "주소 삭제 API"
    },
    "auth": {
      "AUTH_SIGNUP_API": "회원가입 API",
      "AUTH_LOGIN_API": "로그인 API",
      "AUTH_LOGOUT_API": "로그아웃 API",
      "AUTH_REFRESH_TOKEN_API": "토큰 갱신 API"
    },
    "banner": {
      "ADMIN_BANNER_CREATE_API": "ADMIN 배너 생성 API",
      "ADMIN_BANNER_UPDATE_API": "ADMIN 배너 수정 API",
      "ADMIN_BANNER_DELETE_API": "ADMIN 배너 삭제 API",
      "BANNER_LIST_API": "배너 목록 조회 API",
      "BANNER_GET_API": "배너 단건 조회 API"
    },
    "coupon": {
      "ADMIN_COUPON_CREATE_API": "ADMIN 쿠폰 생성 API",
      "ADMIN_COUPON_UPDATE_API": "ADMIN 쿠폰 수정 API",
      "ADMIN_COUPON_DELETE_API": "ADMIN 쿠폰 삭제 API",
      "ADMIN_USER_COUPON_GRANT_API": "ADMIN 유저쿠폰 발급 API",
      "COUPON_USE_API": "유저쿠폰 사용 API",
      "COUPON_LIST_API": "쿠폰 목록 조회 API",
      "COUPON_GET_API": "쿠폰 단건 조회 API",
      "USER_COUPON_LIST_API": "유저쿠폰 목록 조회 API",
      "USER_COUPON_GET_API": "유저쿠폰 단건 조회 API",
      "EVENT_COUPON_LIST_API": "이벤트용 쿠폰 목록 조회 API"
    },
    "delivery": {
      "ADMIN_DELIVERY_CREATE_API": "ADMIN 배송정보 등록 API",
      "ADMIN_DELIVERY_GET_API": "ADMIN 배송 정보 조회 API",
      "ADMIN_DELIVERY_UPDATE_API": "ADMIN 배송 정보 수정 API",
      "USER_DELIVERY_GET_API": "USER 배송정보 단건 조회 API"
    },
    "event": {
      "ADMIN_EVENT_CREATE_API": "ADMIN 이벤트 생성 API",
      "ADMIN_EVENT_UPDATE_API": "ADMIN 이벤트 수정 API",
      "ADMIN_EVENT_DELETE_API": "ADMIN 이벤트 삭제 API",
      "EVENT_STREAM_API": "이벤트 결과 스트림 구독 API",
      "EVENT_LIST_API": "이벤트 목록 조회 API",
      "EVENT_GET_API": "이벤트 단건 조회 API",
      "EVENT_PARTICIPATE_API": "이벤트 참여 API"
    },
       "favorite": {
      "FAVORITE_CREATE_API": "즐겨찾기 등록 API",
      "FAVORITE_CHECK_API": "즐겨찾기 여부 조회 API",
      "FAVORITE_LIST_API": "즐겨찾기 목록 조회 API",
      "FAVORITE_DELETE_API": "즐겨찾기 삭제 API"
    },
    "user": {
      "USER_GET_INFO_API": "유저 정보 조회 API",
      "USER_UPDATE_INFO_API": "유저 정보 수정 API",
      "USER_DELETE_API": "유저 소프트 딜리트 API",
      "SUPER_ADMIN_USER_ROLE_UPDATE_API": "SUPER_ADMIN 유저 권한 변경 API"
    }
  },
  "description": {
    "address": {
      "ADDRESS_POST_API": "카카오 API에서 주소를 받아와 등록합니다.\n\n## 사용 예시\n1. 기본 주소 등록: 사용자가 처음으로 주소를 등록하는 경우, 자동으로 기본 주소로 설정됩니다.\n2. 추가 주소 등록: 사용자가 여러 주소를 관리할 수 있으며, 기본 주소 여부를 지정할 수 있습니다.\n\n## example\n1. 201 OK \n- 주소 등록 성공 \n2. 400 Bad Request \n- 유효하지 않은 요청 (필수 필드 누락 등)",
      "ADDRESS_LIST_API": "사용자의 주소 목록을 페이지네이션 방식으로 조회합니다.\n\n## 사용 예시\n1. 첫 페이지 조회: lastAddressId 파라미터 없이 조회하면 첫 페이지를 반환합니다.\n2. 다음 페이지 조회: 이전 응답의 nextCursor 값을 lastAddressId로 사용하여 다음 페이지를 조회합니다.\n\n## example\n1. 200 OK\n- 주소 목록 조회 성공: 모든 주소 목록 조회 성공\n- 첫 페이지 주소 목록 조회 성공: lastId 파라미터가 없는 첫번째 페이지 조회\n- 빈 주소 목록 조회 성공: 유저가 등록한 주소가 없어 조회된 빈 목록",
      "ADDRESS_GET_API": "주소 ID를 기반으로 특정 주소의 상세 정보를 조회합니다.\n\n## 사용 예시\n주소 id로 단건 조회, 사용자 본인의 주소만 조회 가능\n\n## example\n1. 200 OK\n- 주소 단건 조회 성공\n2. 404 Not Found\n- 주소 조회 실패: 존재하지 않는 주소로 조회 시도",
      "ADDRESS_UPDATE_API": "기존 주소 정보를 수정합니다.\n\n## 사용 예시\n1. 주소 정보 업데이트: 상세 주소나 별칭 등의 정보를 수정합니다.\n2. 기본 주소 설정: 기존 주소를 기본 주소로 변경할 수 있습니다.\n\n## example\n1. 200 OK\n- 주소 수정 성공: 카카오 API에서 받아온 정보로 사용자 본인의 주소 수정\n2. 400 Bad Request\n- 주소 수정 실패: 디폴트인 주소 수정 - 기본주소 상태인 주소의 기본주소 여부를 False로 변경 시도\n3. 404 Not Found\n- 주소 수정 실패: 존재하지 않는 주소로 수정 시도",
      "ADDRESS_DELETE_API": "주소 ID를 기반으로 특정 주소를 삭제합니다.\n\n## 사용 예시\n주소 id로 주소 삭제, 사용자 본인의 주소만 삭제\n\n## example\n1. 200 OK\n- 주소 삭제 성공\n2. 400 Bad Request\n- 주소 삭제 실패: 디폴트주소 삭제 시도 - 기본주소인 주소를 삭제시도 시 예외발생\n3. 404 Not Found\n- 주소 삭제 실패: 존재하지 않는 주소로 조회 시도"
    },
    "auth": {
      "AUTH_SIGNUP_API": "사용자 정보를 입력받아 계정을 생성합니다.\n\n## 사용 예시\n이메일, 비밀번호, 닉네임을 입력하여 회원가입 진행\n\n## example\n1. 201 Created\n- 회원가입 성공\n2. 409 Conflict\n- 회원가입 실패: 중복 이메일 - 이미 등록된 이메일로 가입시도 시 예외발생",
      "AUTH_LOGIN_API": "이메일과 비밀번호를 입력받아 로그인을 처리합니다.\n\n## 사용 예시\n이메일과 비밀번호를 입력하여 로그인 진행\n\n## example\n1. 200 OK\n- 로그인 성공: 로그인 시, 어세스토큰 반환 & 어세스토큰과 리프레시토큰 쿠키에 저장\n2. 404 Not Found\n- 로그인 실패: 존재하지 않는 메일로 로그인 - 존재하지 않는 메일로 로그인 시 예외발생\n3. 401 Unauthorized\n- 로그인 실패: 비밀번호 불일치 - 비밀번호 불일치시 예외발생",
      "AUTH_LOGOUT_API": "로그인된 사용자의 로그아웃을 처리합니다.\n\n## 사용 예시\n로그인 상태에서 로그아웃 요청\n\n## example\n1. 200 OK\n- 로그아웃 성공: 로그아웃 시, 해당 어세스토큰을 남은 유효시간만큼의 TTL 값으로 레디스 블랙리스트에 등록",
      "AUTH_REFRESH_TOKEN_API": "리프레시 토큰을 사용하여 액세스 토큰을 재발급합니다.\n\n## 사용 예시\n리프레시 토큰을 쿠키에 담아 요청\n\n## example\n1. 200 OK\n- 리프레시 토큰으로 엑세스 토큰 재발급 성공: 쿠키에 저장된 리프레시토큰으로 어세스토큰 재발급 성공, 사용된 리프레시토큰은 무효화 후 새로운 리프레시토큰 쿠키에 저장\n2. 403 Forbidden\n- 리프레시 토큰으로 엑세스 토큰 재발급 실패: 유저아이디와 리프레시토큰 불일치 - 리프레시 토큰에 저장된 유저아이디와 DB에 저장된 리프레시토큰의 정보가 다를 경우 예외발생"
    },
    "banner": {
      "ADMIN_BANNER_CREATE_API": "관리자가 새로운 배너를 생성합니다.\n\n## 사용 예시\n이벤트 ID, 이미지 URL, 시작 시간, 종료 시간 정보를 입력하여 배너 생성\n\n## example\n1. 201 Created\n- ADMIN 배너 생성 성공: 관리자가 배너 생성, 입력한 시작일과 종료일에 맞춰 상태변경 스케쥴러 실행\n2. 404 Not Found\n- ADMIN 배너 생성 실패: 존재하지 않는 이벤트 아이디로 배너 생성 - 관리자가 존재하지 않는 이벤트 아이디로 배너생성 시도 시 예외발생",
      "ADMIN_BANNER_UPDATE_API": "관리자가 기존 배너를 수정합니다.\n\n## 사용 예시\n배너 ID를 지정하여 이벤트 ID, 이미지 URL, 시작 시간, 종료 시간 정보를 수정\n\n## example\n1. 200 OK\n- ADMIN 배너 수정 성공: 관리자가 배너 아이디로 배너정보 수정\n2. 404 Not Found\n- ADMIN 배너 수정 실패: 존재하지 않는 배너아이디로 수정 - 관리자가 존재하지 않는 배너아이디로 배너정보 수정 시도 시 예외발생\n- ADMIN 배너 수정 실패: 존재하지 않는 이벤트아이디로 수정 - 관리자가 존재하지 않는 이벤트아이디로 배너정보 수정 시도시 예외발생",
      "ADMIN_BANNER_DELETE_API": "관리자가 배너를 삭제합니다.\n\n## 사용 예시\n배너 ID를 지정하여 배너 삭제\n\n## example\n1. 200 OK\n- ADMIN 배너 삭제 성공: 관리자가 배너아이디로 배너 삭제\n2. 404 Not Found\n- ADMIN 배너 삭제 실패: 존재하지 않는 배너아이디로 삭제 - 관리자가 존재하지않는 배너아이디로 배너삭제 시도 시 예외발생",
      "BANNER_LIST_API": "배너 목록을 페이지네이션 방식으로 조회합니다.\n\n## 사용 예시\n시작일과 종료일 범위를 지정하여 배너 목록 조회\n\n## example\n1. 200 OK\n- 배너 목록 조회 성공: 시작시간, 종료시간 미입력 - 종료시간 내림차순, startDate, EndDate 파라미터 미입력 시 모든 배너 반환\n- 배너 목록 조회 성공: 시작일 입력 - 입력된 시작일 이후의 배너목록 반환\n- 배너 목록 조회 성공: 종료일 입력 - 입력된 종료일 이전의 배너목록 반환\n- 배너 목록 조회 성공: 시작일 & 종료일 입력 - 입력된 시작일보다 이후이면서 종료일 이전의 배너목록 반환\n- 배너 목록 조회 성공: 빈 목록 조회 - 입력된 정보와 일치파는 배너정보가 없을경우 빈목록 반환",
      "BANNER_GET_API": "특정 배너의 상세 정보를 조회합니다.\n\n## 사용 예시\n배너 ID를 지정하여 상세 정보 조회\n\n## example\n1. 200 OK\n- 배너 단건 조회 성공: 배너 아이디로 배너 단건조회 성공\n2. 404 Not Found\n- 배너 단건 조회 실패: 존재하지 않는 배너아이디로 조회 - 존재하지 않는 배너아이디로 배너조회 시도 시 예외발생"
    },
    "coupon": {
      "ADMIN_COUPON_CREATE_API": "관리자가 새로운 쿠폰을 생성합니다.\n\n## 사용 예시\n쿠폰명, 할인 값, 시작 시간, 종료 시간 등 정보를 입력하여 쿠폰 생성\n\n## example\n1. 201 Created\n- ADMIN 쿠폰 생성 성공: 관리자가 쿠폰 생성",
      "ADMIN_COUPON_UPDATE_API": "관리자가 기존 쿠폰을 수정합니다.\n\n## 사용 예시\n쿠폰 ID를 지정하여 쿠폰명, 할인 값, 시작 시간, 종료 시간 등 정보를 수정\n\n## example\n1. 200 OK\n- ADMIN 쿠폰 수정 성공: 관리자가 쿠폰 정보 수정\n2. 404 Not Found\n- ADMIN 쿠폰 수정 실패: 존재하지 않는 쿠폰아이디로 수정 시도 - 관리자가 존재하지 않는 쿠폰아이디로 수정 시도 시 예외발생",
      "ADMIN_COUPON_DELETE_API": "관리자가 쿠폰을 삭제합니다.\n\n## 사용 예시\n쿠폰 ID를 지정하여 쿠폰 삭제\n\n## example\n1. 200 OK\n- ADMIN 쿠폰 삭제 성공: 관리자가 쿠폰 삭제 성공\n2. 404 Not Found\n- ADMIN 쿠폰 삭제 실패: 존재하지 않는 쿠폰아이디로 삭제 시도 - 관리자가 존재하지 않는 쿠폰아이디로 쿠폰 삭제 시도 시 예외발생",
      "ADMIN_USER_COUPON_GRANT_API": "관리자가 사용자에게 쿠폰을 발급합니다.\n\n## 사용 예시\n쿠폰 ID와 사용자 ID를 지정하여 유저쿠폰 발급\n\n## example\n1. 201 Created\n- ADMIN 유저쿠폰 발급 성공: 관리자가 유저가 사용할 유저쿠폰 발급\n2. 404 Not Found\n- 유저쿠폰 발급 실패: 존재하지 않는 쿠폰아이디로 유저쿠폰 발급 시도 - 관리자가 존재하지 않는 쿠폰아이디로 유저쿠폰 발급 시도 시 예외발생",
      "COUPON_USE_API": "로그인한 사용자가 발급된 유저쿠폰을 사용합니다.\n\n## 사용 예시\n사용자 쿠폰 ID를 지정하여 쿠폰 사용\n\n## example\n1. 201 Created\n- 유저쿠폰 사용 성공: 로그인한 사용자가 발급된 유저쿠폰 사용\n2. 404 Not Found\n- 유저쿠폰 사용 실패: 존재하지 않는 유저쿠폰 아이디 or 사용 혹은 만료된 쿠폰 - 로그인한 존재하지 않는 유저쿠폰 아이디 혹은 사용되거나 만료된 쿠폰 사용 시도 시 예외발생",
      "COUPON_LIST_API": "쿠폰 목록을 페이지네이션 방식으로 조회합니다.\n\n## 사용 예시\n페이지 번호, 사이즈, 시작일, 종료일 등 조건을 지정하여 쿠폰 목록 조회\n\n## example\n1. 200 OK\n- 쿠폰 목록 조회 성공(쿠폰 만료시간 기준 오름차순): 페이징기반 페이지네이션, startDate, endDate 미입력시 모든 쿠폰 조회\n- 쿠폰 목록 조회 성공: 시작일 입력 - 입력된 시작일 이후의 쿠폰 목록 반환\n- 쿠폰 목록 조회 성공: 종료일 입력 - 입력된 종료일 이전의 쿠폰 목록 반환\n- 쿠폰 목록 조회 성공: 시작일 & 종료일 입력 - 입력된 시작일 이후 그리고 종료일 이전의 쿠폰 목록 반환\n- 쿠폰 목록 조회 성공: 빈 목록 조회 - 입력된 조건과 일치하는 쿠폰이 없을 경우 빈 목록 반환",
      "COUPON_GET_API": "특정 쿠폰의 상세 정보를 조회합니다.\n\n## 사용 예시\n쿠폰 ID를 지정하여 쿠폰 정보 조회\n\n## example\n1. 200 OK\n- 쿠폰 단건 조회 성공: 쿠폰 아이디로 쿠폰 정보 조회\n2. 404 Not Found\n- 쿠폰 단건 조회 실패: 존재하지 않는 쿠폰 아이디로 조회 시도 - 존재하지 않는 쿠폰 아이디로 조회 시도 시 예외발생",
      "USER_COUPON_LIST_API": "로그인한 사용자의 쿠폰 목록을 조회합니다.\n\n## 사용 예시\n페이지 번호, 사이즈, 쿠폰 상태 등 조건을 지정하여 사용자 쿠폰 목록 조회\n\n## example\n1. 200 OK\n- 유저쿠폰 목록 조회 성공(쿠폰 만료일 기준 오름차순): 페이지 기반 페이지네이션, 로그인한 유저가 본인의 쿠폰 목록 조회, 상태 미입력시 모든 쿠폰 반환\n- 유저쿠폰 목록 조회 성공: 빈 목록 조회 - 조건과 일치하는 쿠폰이 없을 시 빈 목록 반환\n- 유저쿠폰 목록 조회 성공: ISSUED 상태 조회 - 쿠폰 상태가 issued인 쿠폰 반환",
      "USER_COUPON_GET_API": "로그인한 사용자의 특정 쿠폰 정보를 조회합니다.\n\n## 사용 예시\n사용자 쿠폰 ID를 지정하여 쿠폰 정보 조회\n\n## example\n1. 200 OK\n- 유저쿠폰 단건 조회 성공: 유저쿠폰 아이디로 로그인한 사용자 본인의 쿠폰 단건 조회\n2. 404 Not Found\n- 유저쿠폰 단건 조회 실패: 존재하지 않는 유저쿠폰 아이디로 조회 시도 - 존재하지 않는 유저쿠폰 아이디로 조회시도 시 예외발생",
      "EVENT_COUPON_LIST_API": "이벤트용 쿠폰 목록을 조회합니다.\n\n## 사용 예시\n이벤트 시작일, 종료일 등 조건을 지정하여 쿠폰 목록 조회\n\n## example\n1. 200 OK\n- 이벤트용 쿠폰 목록 조회 성공(쿠폰 만료일 기준 오름차순): 페이지네이션 기반 페이징, startDate, EndDate 미입력시 모든 쿠폰 반환\n- 이벤트용 쿠폰 목록 조회 성공: 시작일 입력 - 입력된 이벤트 시작일 이전에 시작하는 쿠폰목록 반환\n- 이벤트용 쿠폰 목록 조회 성공: 종료일 입력 - 입력된 이벤트 종료일 이후에 종료되는 쿠폰목록 반환\n- 이벤트용 쿠폰 목록 조회 성공: 이벤트 시작일 & 종료일 입력 - 입력된 이벤트 시작일 이전에 시작되고, 이벤트 종료일 이후에 종료되는 쿠폰목록 반환"
    },
    "delivery": {
      "ADMIN_DELIVERY_CREATE_API": "관리자가 배송 정보를 등록합니다.\n\n## 사용 예시\n주문 ID, 수령인 정보, 배송 메시지, 택배사, 운송장 번호 등 정보 입력\n\n## example\n1. 201 Created\n- ADMIN 배송정보 등록 성공: 관리자가 운송장 번호로 배송정보 등록\n2. 409 Conflict\n- ADMIN 배송정보 등록 실패: 이미 배송정보가 존재하는 주문정보로 등록 - 관리자가 이미 배송정보 보다 등록된 주문에 배송정보 등록시도 시 예외발생\n3. 404 Not Found\n- ADMIN 배송정보 등록 실패: 존재하지 않는 주문아이디로 등록 - 관리자가 존재하지 않는 주문아이디로 배송정보 등록 시도 시 예외발생\n4. 400 Bad Request\n- ADMIN 배송정보 등록 실패: 유효하지 않은 주문상태로 등록 - 관리자가 주문상태가 'PROCESSING'이 아닌 경우 예외 발생",
      "ADMIN_DELIVERY_GET_API": "관리자가 배송 정보를 조회합니다.\n\n## 사용 예시\n배송 ID를 지정하여 배송 정보 조회\n\n## example\n1. 200 OK\n- ADMIN 배송 정보 조회 성공: 관리자가 배송 아이디로 배송 정보 단건 조회\n2. 404 Not Found\n- ADMIN 배송 정보 조회 실패: 존재하지 않는 배송 아이디로 조회 - 관리자가 존재하지 않는 배송 아이디로 배송정보 조회 시도 시 예외 발생",
      "ADMIN_DELIVERY_UPDATE_API": "관리자가 배송 정보를 수정합니다.\n\n## 사용 예시\n배송 ID를 지정하여 배송 상태 등 정보 수정\n\n## example\n1. 200 OK\n- ADMIN 배송 정보 수정 성공: 관리자가 배송 정보 아이디로 배송 정보 수정\n2. 404 Not Found\n- ADMIN 배송 정보 수정 실패: 존재하지 않는 배송 아이디 수정 - 관리자가 존재하지 않는 배송 아이디로 배송 정보 수정시도 시 예외 발생\n3. 400 Bad Request\n- ADMIN 배송 정보 수정 실패: 같은 배송 상태로 변경 시도 - 관리자가 배송 정보 수정 시 같은 배송 상태로 변경할 경우 예외 발생\n- ADMIN 배송 정보 수정 실패: 유효하지 않은 순서로 상태 변경 시도 - 관리자가 배송 정보 수정 시 유효하지 않은 순서로 상태를 변경할 경우 예외 발생",
      "USER_DELIVERY_GET_API": "로그인한 사용자가 자신의 주문에 대한 배송 정보를 조회합니다.\n\n## 사용 예시\n주문 ID로 배송 정보 조회\n\n## example\n1. 200 OK\n- USER 배송정보 단건 조회 성공: 로그인한 사용자가 본인의 주문내역에 대한 배송정보 조회\n2. 404 Not Found\n- USER 배송정보 조회 실패: 존재하지 않는 주문 아이디로 조회 - 로그인한 사용자가 존재하지 않는 주문 아이디로 배송정보 조회 시 예외 발생\n3. 403 Forbidden\n- USER 유저의 배송정보 조회 실패: 타인의 주문 아이디로 배송정보를 조회 - 로그인한 사용자가 타인의 주문 아이디로 배송정보를 조회 시 예외 발생"
    },
    "event": {
      "ADMIN_EVENT_CREATE_API": "관리자가 새로운 이벤트를 생성합니다.\n\n## 사용 예시\n이벤트명, 설명, 시작 시간, 종료 시간, 이벤트 상세 정보 등 입력\n\n## example\n1. 201 Created\n- ADMIN 이벤트 생성 성공: 관리자가 이벤트 생성\n2. 400 Bad Request\n- ADMIN 이벤트 생성 실패: 이벤트 종료 시간이 현재 시간보다 이전일 때 - 관리자가 현재 시간 이전인 이벤트 종료시간 입력 시 예외 발생\n- ADMIN 이벤트 생성 실패: 이벤트 시작 시간이 종료 시간보다 이후일 때 - 관리자가 이벤트 종료시간 이후의 시작시간을 입력 시 예외 발생\n- ADMIN 이벤트 생성 실패: 상세 정보 누락 - 관리자가 이벤트 생성 시 입력한 Object 필드에 필요한 정보가 입력되지 않았을 때 예외 발생\n- ADMIN 이벤트 생성 실패: 이벤트 디테일 Object를 String으로 파싱 실패 - 관리자가 입력한 이벤트 디테일 Object를 String으로 파싱 실패 시 예외발생",
      "ADMIN_EVENT_UPDATE_API": "관리자가 기존 이벤트를 수정합니다.\n\n## 사용 예시\n이벤트 ID를 지정하여 이벤트명, 설명, 시작 시간, 종료 시간, 이벤트 상세 정보 등 수정\n\n## example\n1. 200 OK\n- ADMIN 이벤트 수정 성공: 관리자가 이벤트 아이디로 이벤트 정보 수정\n2. 404 Not Found\n- ADMIN 이벤트 수정 실패: 이벤트가 등록된 배너 정보가 존재하지 않을 경우 - 관리자가 이벤트 수정 시 이벤트가 등록된 배너 정보가 존재하지 않을 경우 예외 발생\n- ADMIN 이벤트 수정 실패: 쿠폰 정보 누락 - 관리자가 이벤트 수정 시 입력한 이벤트 디테일 Object에 쿠폰정보가 누락된 경우 예외 발생\n- ADMIN 이벤트 수정 실패: 이벤트 디테일 Object -> String 파싱 실패 - 관리자가 이벤트 수정 시 이벤트 디테일 Object를 String으로 파싱 실패할 경우 예외 발생\n- ADMIN 이벤트 수정 실패: 이벤트 디테일 String -> JsonNode 파싱 실패 - 관리자가 이벤트 수정 시 수정 결과를 반환하기 위해 이벤트 디테일 String을 JsonNode로 파싱할 때, 실패하는 경우 예외 발생",
      "ADMIN_EVENT_DELETE_API": "관리자가 이벤트를 삭제합니다.\n\n## 사용 예시\n이벤트 ID를 지정하여 이벤트 삭제\n\n## example\n1. 200 OK\n- ADMIN 이벤트 삭제 성공: 관리자가 이벤트 아이디로 이벤트 삭제\n2. 404 Not Found\n- ADMIN 이벤트 삭제 실패: 존재하지 않는 이벤트아이디로 삭제시도 - 관리자가 존재하지 않는 이벤트아이이디로 삭제 시도 시 예외 발생",
      "EVENT_STREAM_API": "이벤트 진행 상황을 실시간으로 확인할 수 있는 스트림을 제공합니다.\n\n## 사용 예시\n이벤트 ID를 지정하여 SSE 스트림 구독\n\n## example\n1. 200 OK\n- 이벤트 결과 스트림 구독 및 Emitter 반환 성공: 사용자가 이벤트 참여를 위해 이벤트 정보 화면에 진입 시, SSE 스트림을 구독하고 해당 연결의 Emitter를 반환\n2. 404 Not Found\n- 이벤트 결과 스트림 구독 및 Emitter 반환 성공: 스트림 구독을 위해 이벤트 상태 조회 시 존재하지 않는 이벤트아이디가 입력된 경우 예외 발생",
      "EVENT_LIST_API": "이벤트 목록을 페이지네이션 방식으로 조회합니다.\n\n## 사용 예시\n상태, 타입, 시작일, 종료일 등 조건을 지정하여 이벤트 목록 조회\n\n## example\n1. 200 OK\n- 이벤트 목록 조회 성공: 종료시간 오름차순 - 페이지네이션 기반 페이징, 상태, 타입, 시작시간, 종료시간이 입력되지 않은 경우 모든 이벤트 목록 반환\n- 이벤트 목록 조회 성공: 상태 조건 입력(ONGOING) - 이벤트 목록 조회 시 ongoing 상태 조건만 입력한 경우\n- 이벤트 목록 조회 성공: 타입 조건 입력(선착순 FCFS) - 이벤트 목록 조회 시 선착순 이벤트 타입만 입력한 경우\n- 이벤트 목록 조회 성공: 시작일 입력 - 이벤트 목록 조회 시 이벤트 시작일만 입력\n- 이벤트 목록 조회 성공: 종료일 입력 - 이벤트 목록 조회 시 종료일만 입력\n- 이벤트 목록 조회 성공: 시작일 & 종료일 입력 - 이벤트 목록 조회 시 시작일과 종료일만 입력, 시작일과 종료일 사이의 목록만 반환\n- 이벤트 목록 조회 성공: 빈 목록 조회 - 이벤트 목록 조회 시 조건과 일치하는 이벤트가 없는 경우 빈 목록 반환",
      "EVENT_GET_API": "특정 이벤트의 상세 정보를 조회합니다.\n\n## 사용 예시\n이벤트 ID를 지정하여 이벤트 상세 정보 조회\n\n## example\n1. 200 OK\n- 이벤트 단건 조회 성공: 이벤트 아이디로 이벤트 단건 조회\n2. 404 Not Found\n- 이벤트 단건 조회 실패: 존재하지 않는 이벤트 아이디로 조회 - 존재하지 않는 이벤트 아이디로 이벤트 단건 조회 시 예외 발생\n3. 400 Bad Request\n- 이벤트 단건 조회 실패: 이벤트 디테일 String -> JsonNode 파싱 실패 - 이벤트 단건 조회 시, 응답을 jsonNode로 반환하기 위해 String을 파싱할 때 실패하는 경우 예외 발생",
      "EVENT_PARTICIPATE_API": "사용자가 이벤트에 참여합니다.\n\n## 사용 예시\n이벤트 ID를 지정하여 이벤트 참여\n\n## example\n1. 200 OK\n- 이벤트 참여 성공: 사용자가 이벤트 참여\n2. 400 Bad Request\n- 이벤트 참여 실패: 이벤트 상태가 'ONGOING'이 아닌 경우 - 이벤트 참여 시도 시, 이벤트 상태가 ONGOING이 아닌 경우 예외 발생\n- 이벤트 참여 실패: 쿠폰 정보 누락 - 이벤트 참여 시도 시 쿠폰 정보가 누락된 경우 예외 발생(이벤트 생성, 수정시 체크하고 있지만 혹시모르는 상황을 고려하여 구현)"
    },
       "favorite": {
      "FAVORITE_CREATE_API": "칵테일(레시피)을 즐겨찾기에 등록합니다.\n\n## 사용 예시\n로그인한 사용자가 칵테일 ID를 지정하여 즐겨찾기 등록\n\n## example\n1. 201 Created\n- 즐겨찾기 등록 성공: 로그인한 유저가 칵테일(레시피) 즐겨찾기\n2. 409 Conflict\n- 즐겨찾기 등록 실패: 이미 등록된 즐겨찾기 - 해당 칵테일(레시피)를 이미 즐겨찾기한 경우 예외 발생\n3. 404 Not Found\n- 즐겨찾기 등록 실패: 존재하지 않는 칵테일 아이디로 등록 시도 - 존재하지 않는 칵테일(레시피) 아이디로 즐겨찾기 등록 시 예외 발생",
      "FAVORITE_CHECK_API": "특정 칵테일의 즐겨찾기 여부를 확인합니다.\n\n## 사용 예시\n로그인한 사용자가 칵테일 ID를 지정하여 즐겨찾기 여부 확인\n\n## example\n1. 200 OK\n- 즐겨찾기 여부 조회 성공: 해당 칵테일(레시피)가 즐겨찾기 되어있는지 확인",
      "FAVORITE_LIST_API": "로그인한 사용자의 즐겨찾기 목록을 조회합니다.\n\n## 사용 예시\n페이지 번호, 사이즈 등 조건을 지정하여 즐겨찾기 목록 조회\n\n## example\n1. 200 OK\n- 즐겨찾기 목록 조회 성공: 페이지네이션 기반 페이징, 로그인한 유저의 즐겨찾기 목록 반환\n- 즐겨찾기 목록 조회 성공: 빈 목록 조회 - 로그인한 유저가 등록한 즐겨찾기가 존재하지 않는다면 빈 목록 반환",
      "FAVORITE_DELETE_API": "즐겨찾기를 삭제합니다.\n\n## 사용 예시\n즐겨찾기 ID를 지정하여 즐겨찾기 삭제\n\n## example\n1. 200 OK\n- 즐겨찾기 삭제 성공: 로그인한 유저가 즐겨찾기 아이디로 본인의 즐겨찾기 삭제\n2. 403 Forbidden\n- 즐겨찾기 삭제 실패: 존재하지 않는 즐겨찾기아이디로 삭제 시도 - 로그인한 유저가 존재하지 않는 아이디 또는 타인의 즐겨찾기 아이디로 삭제시도 시 예외발생"
    },
    "user": {
      "USER_GET_INFO_API": "로그인한 사용자의 정보를 조회합니다.\n\n## 사용 예시\n로그인 상태에서 본인 정보 조회\n\n## example\n1. 200 OK\n- 유저 정보 조회 성공: 로그인한 사용자가 본인 정보 조회\n2. 404 Not Found\n- 유저 정보 조회 실패: 존재하지 않거나 소프르딜리트 된 유저아이디 - 존재하지 않거나 소프트딜리트된 유저아이디로 정보조회 시 예외 발생(탈퇴시 토큰무효화를 하지만, 혹시모를 경우로 구현)",
      "USER_UPDATE_INFO_API": "로그인한 사용자의 정보를 수정합니다.\n\n## 사용 예시\n닉네임, 비밀번호 등 정보 수정\n\n## example\n1. 200 OK\n- 유저 정보 수정 성공: 로그인한 사용자 본인의 닉네임, 패스워드 변경\n2. 404 Not Found\n- 유저 정보 수정 실패: 존재하지 않거나 소프르딜리트 된 유저아이디 - 존재하지 않거나 소프트딜리트된 유저아이디로 수정시도 시 예외 발생(탈퇴시 토큰무효화를 하지만, 혹시모를 경우로 구현)",
      "USER_DELETE_API": "로그인한 사용자의 계정을 비활성화(소프트 딜리트)합니다.\n\n## 사용 예시\n로그인 상태에서 회원 탈퇴 요청\n\n## example\n1. 200 OK\n- 유저 소프트 딜리트 성공: 유저 소프트 딜리트 시 해당 어세스토큰을 남은 시간만큼의 TTL로 블랙리스트에 등록, 리프레시토큰 삭제\n2. 409 Conflict\n- 유저 소프트 딜리트 실패: 존재하지 않거나 소프르딜리트 된 유저아이디 - 존재하지 않거나 소프트딜리트된 유저아이디로 삭제시도 시 예외 발생(탈퇴시 토큰무효화를 하지만, 혹시모를 경우로 구현)",
      "SUPER_ADMIN_USER_ROLE_UPDATE_API": "수퍼 관리자가 다른 사용자의 권한을 변경합니다.\n\n## 사용 예시\n사용자 ID와 변경할 권한 정보를 지정\n\n## example\n1. 200 OK\n- SUPER_ADMIN 유저 권한 변경 성공: 수퍼어드민 계정으로 유저(USER)와 관리자(ADMIN) 권한 변경\n2. 409 Conflict\n- SUPER_ADMIN 유저 권한 변경 실패: 같은 권한으로 변경 시도 - 수퍼어드민 권한으로 권한변경 시 같은 권한으로 변경시도할 경우 예외 발생"
    }
  }
}